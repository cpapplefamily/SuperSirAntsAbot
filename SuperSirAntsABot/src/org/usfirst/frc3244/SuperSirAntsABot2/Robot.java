// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot2;

import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.SuperSirAntsABot2.subsystems.Drive;
import org.usfirst.frc3244.SuperSirAntsABot2.util.Utils;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_00_Reach_BaseLine;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_31_1_Start_Right_Delliver_Switch_IF_R;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_32_1_Start_Right_Deliver_Scale_IF_R;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_11_1_Start_Left_Delliver_Switch_IF_L;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_12_1_Start_Left_Deliver_Scale_IF_L;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_21_1_Start_Center_Deliver_Switch;
import org.usfirst.frc3244.SuberSirAntsABot2.autonomousroutines.Auto_99;
import org.usfirst.frc3244.SuperSirAntsABot2.commands.*;
import org.usfirst.frc3244.SuperSirAntsABot2.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
	
	public static final boolean DEBUG = false;
	boolean isWeek0 = false;
	
	//Disabled variables
    private Integer scancount = 0 ;
	private Integer sequence = 0 ;
	private Integer count = 0;
   
	Command autonomousCommand;
    private String autonomousSelected;
	public static SendableChooser autonomousChooser;
	//public static SendableChooser StartUpChooser;
	private int m_auto = 0;

    public static OI oi;
    public static Drive drive;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Intake intake;
    public static Winch winch;
    public static Scissor scissor;
    public static Wrist wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public NetworkTableInstance offSeasonNetworkTable;
    public NetworkTable limeLighttable;
    
    public static String gameData;

    public static final PowerDistributionPanel pdp = new PowerDistributionPanel();
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        drive = new Drive(); //Robotbuilder No longer Manages this
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intake = new Intake();
        winch = new Winch();
        scissor = new Scissor();
        wrist = new Wrist();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

     // Initialize the subsystems that need it
        drive.init();
        scissor.init();
        intake.init();
        wrist.init();
        winch.init();
        
      
        
     //Set up Choosers
        setupAutomousChooser();
     //setupStartUpChooser();
     //Add a Number Input box to use to manualy select the Autonomous
        SmartDashboard.putNumber("Manualy Selected Autonoums: ", m_auto);
      
     //Add Subsystem Owners to SmartDashboard
        SmartDashboard.putData("DriveTrain", drive);
        SmartDashboard.putData("Scissor", scissor);
        SmartDashboard.putData("Intake", intake);
        SmartDashboard.putData("Wrist", wrist);
        SmartDashboard.putData("Winch", winch);
        
        
        
        DriverStation.reportError("Configuring Network Tables", false);
     //Network Tables
        if(isWeek0) {	
        	DriverStation.reportError("Configuring Week0 Network Tables", false);
	        offSeasonNetworkTable = NetworkTableInstance.create();
	        offSeasonNetworkTable.startClient("10.0.100.5");
        }
        
        limeLighttable = NetworkTableInstance.getDefault().getTable("limelight");
        
    }
    
    private void setupAutomousChooser(){
    	//Create the Auto Chooser
    	//SmartDashboard.putString("autonomous Title", "Autonomous Choice");
        autonomousChooser = new SendableChooser();
        
        // ******* Default Auto
        
        autonomousChooser.addDefault("99: Auto_99 - NORTH", new Auto_99());					//Robot Starts facing NORTH
        
        // ******* Basic Auto
        autonomousChooser.addObject("0: Auto_00 Reach BaseLine - NORTH", new Auto_00_Reach_BaseLine());					//Robot Starts facing NORTH
        
        // ******* Left Auto
        
        autonomousChooser.addObject("1: Auto_11 Deliver Switch From Left - NORTH", new Auto_11_1_Start_Left_Delliver_Switch_IF_L());								//Robot Starts facing SOUTH
        autonomousChooser.addObject("2: Auto_12 Deliver Scale From Left - NORTH", new Auto_12_1_Start_Left_Deliver_Scale_IF_L());								//Robot Starts facing SOUTH
        
        // ******* Center Auto
        autonomousChooser.addObject("3: Auto_21 Deliver Switch From Center - NORTH", new Auto_21_1_Start_Center_Deliver_Switch());
        
        // ******* Right Auto
        
        autonomousChooser.addObject("5: Auto_31 Deliver Switch From Right - NORTH", new Auto_31_1_Start_Right_Delliver_Switch_IF_R());								//Robot Starts facing SOUTH
        autonomousChooser.addObject("6: Auto_32 Deliver Scale From Right - NORTH", new Auto_32_1_Start_Right_Deliver_Scale_IF_R());								//Robot Starts facing SOUTH
        
        
        
  
        //autonomousChooser.addObject("x: abc", new Auto_10());
        //Add More Options
        
        //Place autonomousChooser on the SmartDashboard
        SmartDashboard.putData("Autonomous Chooser", autonomousChooser);
    }
    

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    	Robot.oi.launchPad.setOutputs(0);
    	limeLighttable.getEntry("ledMode").setValue(1);

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        updateSmartDashboard();
        
        scancount  = scancount+1;
        if (RobotMap.ahrs.isConnected()){
        	Robot.oi.launchPad.setOutputs(sequence);
        }
		
		if (scancount > 10){
        	sequence = sequence<<1;
        	scancount = 0;
        	count =count +1;
        }
		if (count == 11){
        	sequence = sequence+1;
        	count = 0;
        	//Test SmartDashboar Send the current AutoChoice
        	autonomousSelected = autonomousChooser.getSelected().toString();
        	//Put the selected name on the smartdashboard
            SmartDashboard.putString("Auto Choice", autonomousSelected);
        }
    }
 

    @Override
    public void autonomousInit() {
    	//Zero the Gyro
    	Robot.drive.recalibrateHeadingGyro();
    	Robot.drive.set_PreserveHeading(true);// When Testing climb we forget to re-enable
    	
    	DriverStation.reportWarning("Setting Autionomous", false);
    	
    	// get Selected Autonomous
    	if(isWeek0) {
    		DriverStation.reportError("Getting GameData", false);
	    	gameData = offSeasonNetworkTable
	    			.getTable("OffseasongFMSInfo")
	    			.getEntry("GameData")
	    			.getString("defaultValue");
    	}else {
    		gameData = DriverStation.getInstance().getGameSpecificMessage();
    	}
    
    	//DriverStation.reportError("Game Data: " + gameData.toString(), false);
    	
    	autonomousCommand = (Command) autonomousChooser.getSelected();
		autonomousSelected = autonomousChooser.getSelected().toString();
		
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    
    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateSmartDashboard();
    }

    @Override
    public void teleopInit() {
    	limeLighttable.getEntry("ledMode").setValue(1);
    	
    	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        DriverStation.reportError("My Entering Teleop.", false);
        
        Robot.scissor.my_ScissorSetpositionToCurrent();
        Robot.scissor.my_ScissorStop();
        
        Robot.drive.clearDesiredHeading();
        Robot.drive.set_PreserveHeading(true);// When Testing climb we forget to re-enable
    }

    boolean teleopOnce = false;
    
    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	if (!teleopOnce)
    	{
    	  DriverStation.reportError("My Teleop Periodic is running!", false);
    	}
    	teleopOnce = true;
        Scheduler.getInstance().run();
            
        // update sensors in drive that need periodic update
        //drive.periodic();
        //elevator.periodic();
        
        drive.mecanumDriveTeleop(oi.driveX(), oi.driveY(), oi.driveRotation()); 
        
        updateSmartDashboard();
        
    }
    
    private long SMART_DASHBOARD_UPDATE_INTERVAL = 250;
    private long nextSmartDashboardUpdate = System.currentTimeMillis();
    
    public void updateSmartDashboard() {
        try {
            if (System.currentTimeMillis() > nextSmartDashboardUpdate) {
                // display free memory for the JVM
            	//double freeMemoryInKB = runtime.freeMemory() / 1024;
                //SmartDashboard.putNumber("Free Memory", freeMemoryInKB); 
                
                //SmartDashboard.putNumber("Battery Voltage", pdp.getVoltage());
                
                // Interesting Gyro Stuff
                SmartDashboard.putNumber("Gyro Angle", Utils.twoDecimalPlaces(Robot.drive.getHeading()));
                SmartDashboard.putNumber("BCK Gyro Angle", Utils.twoDecimalPlaces(RobotMap.adrxs450_Gyro.getAngle()));
                SmartDashboard.putBoolean(  "IMU_Connected",        RobotMap.ahrs.isConnected());
                SmartDashboard.putBoolean(  "IMU_IsCalibrating",    RobotMap.ahrs.isCalibrating());
            	// display mode information
//                SmartDashboard.putBoolean("Is Teleop", DriverStation.getInstance().isOperatorControl());
//                SmartDashboard.putBoolean("Is Autonomous", DriverStation.getInstance().isAutonomous());
//                SmartDashboard.putBoolean("Is Enabled", DriverStation.getInstance().isEnabled());

            	// display interesting OI information
//                SmartDashboard.putNumber("DriveX", oi.driveX());  
//                SmartDashboard.putNumber("DriveY", oi.driveY());  
//                SmartDashboard.putNumber("DriveRotation", oi.driveRotation());  
                
            	drive.updateSmartDashboard();
            	
                nextSmartDashboardUpdate += SMART_DASHBOARD_UPDATE_INTERVAL;
            }
        } catch (Exception e) {
           return;
        }
    }
}
